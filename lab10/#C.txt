#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
bool test = false;
typedef long long int ll;
int n;
int x[13]{0};
int y[13]{0};
int paired[13]{0};
int count = 0;
bool r_flag = false;
int vis[13]{0};
int x_nxt;
int index_nxt;
int nxt[13]{0};
int worm[13]{0};
bool tr;

void dfs(int f, int c)
{
    if (test)
        cout << "in: " << c << endl;
    if (vis[c] == 3)
    {
        r_flag = true;
        if (test)
            cout << "return" << endl;
        return;
    }
    vis[c] += 1;
    if (tr == true)
    {
        if (nxt[c] != 0)
        {
            tr = false;
            dfs(c, nxt[c]);
        }
    }
    else
    {
        if (worm[c] != 0)
        {
            tr = true;
            dfs(c, worm[c]);
        }
        else
        {
            tr = false;
            dfs(c, nxt[c]);
        }
    }
    vis[c] -= 1;
    if (test)
        cout << "return" << endl;
}

void pairing(int c)
{
    if (c == n)
    {
        if (test)
        {
            cout << endl;
            for (int i = 1; i <= n; i++)
                cout << i << ": " << worm[i] << " " << nxt[i] << endl;
            cout << endl;
        }

        for (int i = 1; i <= n; i++)
        {
            tr = false;
            dfs(-1, i);
            if (r_flag == true)
            {
                if (test)
                    cout << "Found" << endl;
                count++;
                r_flag = false;
                break;
            }
        }
        if (test)
            cout << "count: " << count << endl;
        return;
    }
    if (paired[c] == 1)
    {
        pairing(c + 1);
        return;
    }
    else
    {
        for (int i = c + 1; i <= n; i++)
        {
            if (paired[i] == 0)
            {
                worm[c] = i;
                worm[i] = c;
                paired[c] = 1;
                paired[i] = 1;
                pairing(c + 1);
                worm[c] = 0;
                worm[i] = 0;
                paired[c] = 0;
                paired[i] = 0;
            }
        }
    }
}

int main(int argc, char **argv)
{
    if (argc == 2 && strcmp(argv[1], "test") == 0)
    {
        test = true;
        cout << "test pattern" << endl;
    }
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> x[i] >> y[i];
    for (int i = 1; i <= n; i++)
    {
        x_nxt = -1;
        index_nxt = 0;
        for (int j = 1; j <= n; j++)
        {
            if (y[i] == y[j] && x[i] < x[j])
            {
                if (x_nxt == -1 || x[j] < x_nxt)
                {
                    x_nxt = x[j];
                    index_nxt = j;
                }
            }
        }
        if (index_nxt != 0)
        {
            nxt[i] = index_nxt;
        }
    }
    pairing(1);
    cout << count << endl;
    return 0;
}