#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
using namespace std;
bool test = false;
typedef long long int ll;
int k, n, m, a, b, t, result = 0;
int person[105]{0};
vector<int> vec[1005];
int mat[105][1005]{0};
int flag[1005]{0};

void dfs(int f, int c)
{
    mat[t][c] = 1;
    for (int i = 0; i < vec[c].size(); i++)
        if (vec[c][i] != f && mat[t][vec[c][i]] == 0)
            dfs(c, vec[c][i]);
}

int main(int argc, char **argv)
{
    if (argc == 2 && strcmp(argv[1], "test") == 0)
    {
        test = true;
        cout << "test pattern" << endl;
    }

    cin >> k >> n >> m;
    for (int i = 1; i <= k; i++)
        cin >> person[i];

    for (int i = 1; i <= m; i++)
    {
        cin >> a >> b;
        vec[a].push_back(b);
    }

    for (t = 1; t <= k; t++)
        dfs(-1, person[t]);
    for (int i = 1; i <= k; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            if (test)
                cout << mat[i][j];
            if (mat[i][j] == 0)
                flag[j] = 1;
        }
        if (test)
            cout << endl;
    }
    if (test)
        cout << endl;
    for (int i = 1; i <= n; i++)
    {
        if (test)
        {
            cout << flag[i];
        }
        if (flag[i] == 0)
            result++;
    }
    if (test)
        cout << endl;
    cout << result << endl;
    return 0;
}