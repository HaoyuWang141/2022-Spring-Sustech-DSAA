// bfs，复杂度令人发指，而且有一个处理不掉的bug
#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
bool test = false;
typedef long long int ll;
const int MAX = 100005;
int N, M, p, q, c, ticket[MAX]{0}, heap_index[MAX]{0}, heap[MAX]{0}, n_heap;
vector<int> vec[MAX];
vector<int> company[MAX];
vector<int> current_company[MAX];

int compare(int a, int b)
{
    if (a == -1 && b == -1)
        return 0;
    else if (a == -1 && b > -1)
        return 1;
    else if (a > -1 && b == -1)
        return 2;
    else if (a > -1 && b > -1)
    {
        if (a > b)
            return 1;
        else if (a < b)
            return 2;
        else
            return 0;
    }
    else
        return -1;
}

void min_heap(int c)
{
    if (c > n_heap)
        return;
    int l = 2 * c;
    int r = 2 * c + 1;
    int m = c;
    if (test)
    {
        cout << "(" << c << "," << heap[c] << "," << ticket[heap[c]] << ") ";
        if (l <= n_heap)
            cout << "(" << l << "," << heap[l] << "," << ticket[heap[l]] << ") ";
        if (r <= n_heap)
            cout << "(" << r << "," << heap[r] << "," << ticket[heap[r]] << ") ";
        cout << endl;
    }
    // if (test)
    //     cout << "l: " << l << " n_heap: " << n_heap << " compare(ticket[heap[l]], ticket[heap[m]]): " << compare(ticket[heap[l]], ticket[heap[m]]) << endl;
    if (l <= n_heap && compare(ticket[heap[l]], ticket[heap[m]]) == 2)
        m = l;
    if (r <= n_heap && compare(ticket[heap[r]], ticket[heap[m]]) == 2)
        m = r;
    if (m != c)
    {
        heap_index[heap[c]] = m;
        heap_index[heap[m]] = c;
        int temp = heap[c];
        heap[c] = heap[m];
        heap[m] = temp;
        min_heap(m);
    }
}

void bfs()
{
    while (n_heap > 0 && ticket[heap[1]] != -1)
    {
        int c = heap[1];
        if (test)
        {
            cout << "c: " << c << endl;
        }
        for (int i = 0; i < vec[c].size(); i++)
        {
            if (test)
            {
                cout << "vec[c][i]: " << vec[c][i] << endl;
            }
            if (vec[c][i] != c)
            {
                bool flag = false;
                for (int j = 0; j < current_company[c].size(); j++)
                    if (current_company[c][j] == company[c][i])
                        flag = true;
                if (ticket[vec[c][i]] == -1)
                {
                    if (flag)
                        ticket[vec[c][i]] = ticket[c];
                    else
                        ticket[vec[c][i]] = ticket[c] + 1;
                    current_company[vec[c][i]].push_back(company[c][i]);
                }
                else
                {
                    if (flag)
                    {
                        if (ticket[c] < ticket[vec[c][i]])
                        {
                            ticket[vec[c][i]] = ticket[c];
                            current_company[vec[c][i]].clear();
                            current_company[vec[c][i]].push_back(company[c][i]);
                        }
                        else if (ticket[c] == ticket[vec[c][i]])
                        {
                            current_company[vec[c][i]].push_back(company[c][i]);
                        }
                    }
                    else
                    {
                        if (ticket[c] + 1 < ticket[vec[c][i]])
                        {
                            ticket[vec[c][i]] = ticket[c] + 1;
                            current_company[vec[c][i]].clear();
                            current_company[vec[c][i]].push_back(company[c][i]);
                        }
                        else if (ticket[c] + 1 == ticket[vec[c][i]])
                        {
                            current_company[vec[c][i]].push_back(company[c][i]);
                        }
                    }
                }
            }
            for (int j = heap_index[vec[c][i]] / 2; j >= 1; j /= 2)
                min_heap(j);
            if (test)
            {
                cout << "heap: ";
                for (int j = 1; j <= n_heap; j++)
                {
                    cout << "(" << heap[j] << ", " << ticket[heap[j]] << ")"
                         << " ";
                }
                cout << endl;
            }
        }
        heap[1] = heap[n_heap--];
        min_heap(1);
        if (test)
        {
            cout << "heap: ";
            for (int j = 1; j <= n_heap; j++)
            {
                cout << "(" << heap[j] << ", " << ticket[heap[j]] << ")"
                     << " ";
            }
            cout << endl;
        }
    }
}

int main(int argc, char **argv)
{
    if (argc == 2 && strcmp(argv[1], "test") == 0)
    {
        test = true;
        cout << "test pattern" << endl;
    }
    cin >> N >> M;
    for (int i = 0; i < M; i++)
    {
        cin >> p >> q >> c;
        vec[p].push_back(q);
        vec[q].push_back(p);
        company[p].push_back(c);
        company[q].push_back(c);
    }
    for (int i = 1; i <= N; i++)
    {
        ticket[i] = -1;
        heap[i] = i;
        heap_index[i] = i;
    }
    n_heap = N;
    ticket[1] = 0;
    bfs();
    cout << ticket[N] << endl;
    return 0;
}