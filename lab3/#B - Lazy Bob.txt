//¶ÑÅÅĞò¡£¡£¡£×ä
#include <iostream>
using namespace std;

int read(int x = 0, int f = 1, char ch = getchar())
{
    while (ch < '0' || ch > '9')
    {
        if (ch == '-')
            f = -1;
        ch = getchar();
    }
    while (ch >= '0' & ch <= '9')
    {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}

void max_heaplity(int *arr, int start, int end)
{
    int dad = start;
    int son = dad * 2 + 1;

    while (son <= end)
    {
        if (son + 1 <= end && arr[son + 1] > arr[son])
            son++;
        if (arr[dad] > arr[son])
            return;
        else
        {
            int temp = arr[dad];
            arr[dad] = arr[son];
            arr[son] = temp;

            dad = son;
            son = dad * 2 + 1;
        }
    }
}

int main()
{
    int n = 0;
    int k = 0;
    cin >> n >> k;
    int *arr = new int[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = read();
    }

    // // test
    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;

    for (int i = n / 2 - 1; i >= 0; i--)
    {
        max_heaplity(arr, i, n - 1);
    }

    // // test
    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;

    for (int i = n - 1; i > n - k; i--)
    {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        max_heaplity(arr, 0, i - 1);
    }

    // //test:
    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;

    cout << arr[0] << endl;

    delete[] arr;
    return 0;
}

//Âú·Ö£º¶ş·Ö+Ë«Ö¸Õë+¿ìÅÅµÄÂß¼­
#include <iostream>
using namespace std;

void swap(int *arr, int a, int b)
{
    int temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
}

int read(int x = 0, int f = 1, char ch = getchar())
{
    while (ch < '0' || ch > '9')
    {
        if (ch == '-')
            f = -1;
        ch = getchar();
    }
    while (ch >= '0' & ch <= '9')
    {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}

int main()
{
    int n = 0;
    int k = 0;
    int min = 0;
    int max = 0;
    int target = 0;
    cin >> n >> k;
    int *arr = new int[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = read();
        min = min > arr[i] ? arr[i] : min;
        max = max < arr[i] ? arr[i] : max;
    }

    int start = 0;
    int end = n - 1;
    int p_left = start;
    int p_right = end;

    while (true)
    {
        target = (min + max) / 2;

        p_left = start;
        p_right = end;

        while (p_left < p_right)
        {
            while (p_left < p_right && arr[p_left] < target)
                p_left++;
            while (p_left < p_right && arr[p_right] >= target)
                p_right--;
            swap(arr, p_left, p_right);
        }

        if (n - p_left > k)
        {
            min = target;
            start = p_left;
        }
        else if (n - p_left < k)
        {
            max = target;
            end = p_left;
        }
        else
            break;
    }

    // // test:
    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;

    min = arr[p_left];
    for (int i = p_left; i < n; i++)
    {
        min = min > arr[i] ? arr[i] : min;
    }

    cout << min << endl;

    delete[] arr;
    return 0;
}