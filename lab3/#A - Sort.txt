//¶ÑÅÅÐò...×ä
#include <iostream>
using namespace std;

int read(int x = 0, int f = 1, char ch = getchar())
{
    while (ch < '0' || ch > '9')
    {
        if (ch == '-')
            f = -1;
        ch = getchar();
    }
    while (ch >= '0' & ch <= '9')
    {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}

void max_heaplity(int *arr, int start, int end)
{
    int dad = start;
    int son = dad * 2 + 1;

    while (son <= end)
    {
        if (son + 1 <= end && arr[son + 1] > arr[son])
            son++;
        if (arr[dad] > arr[son])
            return;
        else
        {
            int temp = arr[dad];
            arr[dad] = arr[son];
            arr[son] = temp;

            dad = son;
            son = dad * 2 + 1;
        }
    }
}

int main()
{
    int n = 0;
    cin >> n;
    int *arr = new int[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = read();
    }

    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;

    for (int i = n / 2 - 1; i >= 0; i--)
    {
        max_heaplity(arr, i, n - 1);
    }

    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;

    for (int i = n - 1; i > 0; i--)
    {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        max_heaplity(arr, 0, i - 1);
    }

    for (int i = 0; i < n; i++)
    {
        if (n <= 100000 || i % 100 == 0)
            cout << arr[i] << " ";
    }

    delete[] arr;
    return 0;
}

//¶ÑÅÅÐò...×ä
#include <iostream>
#include <cstdlib>
using namespace std;

int read(int x = 0, int f = 1, char ch = getchar())
{
    while (ch < '0' || ch > '9')
    {
        if (ch == '-')
            f = -1;
        ch = getchar();
    }
    while (ch >= '0' & ch <= '9')
    {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}

void max_heaplity(int *arr, int start, int end)
{
    int dad = start;
    int son = dad * 2 + 1;

    while (son <= end)
    {
        if (son + 1 <= end && arr[son + 1] > arr[son])
            son++;
        if (arr[dad] > arr[son])
            return;
        else
        {
            int temp = arr[dad];
            arr[dad] = arr[son];
            arr[son] = temp;

            dad = son;
            son = dad * 2 + 1;
        }
    }
}


//Âú·Ö ¶ÑÅÅÐò+¼ÆÊýÅÅÐò
int main()
{
    int n = 0;
    int min = 1000000000;
    int max = -1000000000;

    cin >> n;
    int *arr = new int[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = read();
        min = arr[i] < min ? arr[i] : min;
        max = arr[i] > max ? arr[i] : max;
    }
    // for (int i = 0; i < n; i++)
    //     cout << arr[i] << " ";
    // cout << endl;
    if (n <= 100000)
    {
        for (int i = n / 2 - 1; i >= 0; i--)
        {
            max_heaplity(arr, i, n - 1);
        }

        // for (int i = 0; i < n; i++)
        //     cout << arr[i] << " ";
        // cout << endl;

        for (int i = n - 1; i > 0; i--)
        {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            max_heaplity(arr, 0, i - 1);
        }

        for (int i = 0; i < n; i++)
        {
            if (n <= 100000 || i % 100 == 0)
                cout << arr[i] << " ";
        }
    }
    else
    {
        int k = max - min + 1;
        int *arr_count = new int[k];
        for (int i = 0; i < k; i++)
        {
            arr_count[i] = 0;
        }

        for (int i = 0; i < n; i++)
        {
            arr_count[arr[i] - min]++;
        }

        for (int i = 1; i < k; i++)
        {
            arr_count[i] += arr_count[i - 1];
        }

        int index = 0;
        for (int i = 0; i < n; i++)
        {
            arr[i] = min + index;
            while (index < k && i >= arr_count[index] - 1)
                index++;
        }
        for (int i = 0; i < n; i++)
        {
            if (i % 100 == 0)
                cout << arr[i] << " ";
        }
        delete[] arr_count;
    }

    delete[] arr;
    return 0;
}