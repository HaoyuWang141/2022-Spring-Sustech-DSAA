//二分法
#include <iostream>
using namespace std;

bool Successful_Cutting(size_t n, size_t k, size_t *L, size_t l)
{
    if (l < 0)
    {
        cerr << "有病吧，切个负数？？？" << endl;
        return false;
    }
    else if (l == 0)
    {
        return true;
    }
    else
    {
        size_t count = 0;
        for (size_t i = 0; i < n; i++)
        {
            count += L[i] / l;
        }
        if (count >= k)
            return true;
        else
            return false;
    }
}

int main()
{
    size_t n = 0;
    size_t k = 0;
    size_t L_max = 0;
    size_t left = 0;  //二分法左界
    size_t right = 0; //二分法右界
    size_t mid = 0;
    size_t l = 0;
    cin >> n >> k;
    size_t *L = new size_t[n];
    for (size_t i = 0; i < n; i++)
    {
        cin >> L[i];
        L_max = L_max >= L[i] ? L_max : L[i];
    }

    right = L_max;
    while (left <= right)
    {
        mid = (left + right) / 2;
        if (Successful_Cutting(n, k, L, mid) == true)
        {
            left = mid + 1;
        }
        else
        {
            right = mid - 1;
        }
    }
    l = right;
    cout << l << endl;
    delete[] L;
    return 0;
}