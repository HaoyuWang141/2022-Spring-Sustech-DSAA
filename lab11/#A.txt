// 满分，dijk裸题，堆实现，最小堆写的很丑陋
#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
bool test = false;
typedef long long int ll;
const int MAX_N = 100005;
int n, m, x, y, z, heap[MAX_N]{0}, n_heap;
ll dis[MAX_N]{0};

struct node
{
    int index;
    int value;
    node(int index = 0, int value = 0)
    {
        this->index = index;
        this->value = value;
    }
};

node *nodes[MAX_N];

struct edge
{
    node *nxt;
    ll w;
    edge(node *nxt, ll w)
    {
        this->nxt = nxt;
        this->w = w;
    }
};

vector<edge> vec[MAX_N];

void min_heap(int index_c)
{
    if (2 * index_c > n_heap)
        return;
    int index_s1 = 2 * index_c;
    int index_s2 = 2 * index_c + 1;
    int value_c = heap[index_c];
    int value_s1 = heap[index_s1];
    int index_min_son = 0;
    if (index_s2 > n_heap)
    {
        if (dis[value_s1] != -1)
            index_min_son = index_s1;
    }
    else
    {
        int value_s2 = heap[index_s2];
        if (dis[value_s1] != -1 && dis[value_s2] != -1)
        {
            if (dis[value_s1] <= dis[value_s2])
                index_min_son = index_s1;
            else
                index_min_son = index_s2;
        }
        else if (dis[value_s1] != -1 && dis[value_s2] == -1)
        {
            index_min_son = index_s1;
        }
        else if (dis[value_s1] == -1 && dis[value_s2] != -1)
        {
            index_min_son = index_s2;
        }
    }
    if (index_min_son != 0)
    {
        if (test)
        {
            cout << "value_c: " << value_c << " index_min_son: " << index_min_son<<endl;
            cout << "dis[value_c]: " << dis[value_c] << "  dis[index_min_son]: " << dis[index_min_son] << endl;
        }
        if (dis[value_c] == -1 || dis[value_c] > dis[heap[index_min_son]])
        {
            int temp_index = index_min_son;
            nodes[heap[index_min_son]]->index = index_c;
            nodes[heap[index_c]]->index = temp_index;
            int temp_value = heap[index_min_son];
            heap[index_min_son] = value_c;
            heap[index_c] = temp_value;
            min_heap(index_min_son);
        }
    }
}

int main(int argc, char **argv)
{
    if (argc == 2 && strcmp(argv[1], "test") == 0)
    {
        test = true;
        cout << "test pattern" << endl;
    }
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
    {
        nodes[i] = new node(i, i);
    }
    for (int i = 1; i <= m; i++)
    {
        cin >> x >> y >> z;
        if (x != y)
        {
            edge e(nodes[y], z);
            vec[x].push_back(e);
        }
    }
    for (int i = 1; i <= n; i++)
    {
        heap[i] = i;
        dis[i] = -1;
    }
    dis[1] = 0;
    n_heap = n;
    while (n_heap != 0 && dis[heap[1]] != -1)
    {
        int c = heap[1];
        if (test)
        {
            cout << "c: " << c << endl;
        }
        for (int i = 0; i < vec[c].size(); i++)
        {
            if (test)
            {
                cout << "vec[c][i].nxt->value: " << vec[c][i].nxt->value << endl;
            }
            if (dis[vec[c][i].nxt->value] == -1 || dis[c] + vec[c][i].w < dis[vec[c][i].nxt->value])
            {
                dis[vec[c][i].nxt->value] = dis[c] + vec[c][i].w;
                for (int j = vec[c][i].nxt->index / 2; j >= 1; j--)
                {
                    min_heap(j);
                    if (test)
                    {
                        for (int i = 1; i <= n_heap; i++)
                        {
                            cout << "(" << heap[i] << ", " << dis[heap[i]] << ")"
                                 << " ";
                        }
                        cout << endl;
                    }
                }
            }
        }
        if (test)
        {
            cout << "n_heap: " << n_heap << endl;
        }
        heap[1] = heap[n_heap--];
        min_heap(1);
        if (test)
        {
            for (int i = 1; i <= n_heap; i++)
            {
                cout << "(" << heap[i] << ", " << dis[heap[i]] << ")"
                     << " ";
            }
            cout << endl;
        }
    }
    for (int i = 1; i <= n; i++)
    {
        cout << dis[i] << " ";
    }
    cout << endl;
    return 0;
}